/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ChatMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3325761797117569319L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChatMessage\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"chat_id\",\"type\":\"string\"},{\"name\":\"audio_message_id\",\"type\":\"string\"},{\"name\":\"image_id\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ChatMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ChatMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ChatMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ChatMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ChatMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ChatMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ChatMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ChatMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ChatMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence chat_id;
  private java.lang.CharSequence audio_message_id;
  private java.lang.CharSequence image_id;
  private java.lang.CharSequence timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChatMessage() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param chat_id The new value for chat_id
   * @param audio_message_id The new value for audio_message_id
   * @param image_id The new value for image_id
   * @param timestamp The new value for timestamp
   */
  public ChatMessage(java.lang.CharSequence id, java.lang.CharSequence chat_id, java.lang.CharSequence audio_message_id, java.lang.CharSequence image_id, java.lang.CharSequence timestamp) {
    this.id = id;
    this.chat_id = chat_id;
    this.audio_message_id = audio_message_id;
    this.image_id = image_id;
    this.timestamp = timestamp;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return chat_id;
    case 2: return audio_message_id;
    case 3: return image_id;
    case 4: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: chat_id = (java.lang.CharSequence)value$; break;
    case 2: audio_message_id = (java.lang.CharSequence)value$; break;
    case 3: image_id = (java.lang.CharSequence)value$; break;
    case 4: timestamp = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'chat_id' field.
   * @return The value of the 'chat_id' field.
   */
  public java.lang.CharSequence getChatId() {
    return chat_id;
  }


  /**
   * Sets the value of the 'chat_id' field.
   * @param value the value to set.
   */
  public void setChatId(java.lang.CharSequence value) {
    this.chat_id = value;
  }

  /**
   * Gets the value of the 'audio_message_id' field.
   * @return The value of the 'audio_message_id' field.
   */
  public java.lang.CharSequence getAudioMessageId() {
    return audio_message_id;
  }


  /**
   * Sets the value of the 'audio_message_id' field.
   * @param value the value to set.
   */
  public void setAudioMessageId(java.lang.CharSequence value) {
    this.audio_message_id = value;
  }

  /**
   * Gets the value of the 'image_id' field.
   * @return The value of the 'image_id' field.
   */
  public java.lang.CharSequence getImageId() {
    return image_id;
  }


  /**
   * Sets the value of the 'image_id' field.
   * @param value the value to set.
   */
  public void setImageId(java.lang.CharSequence value) {
    this.image_id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Creates a new ChatMessage RecordBuilder.
   * @return A new ChatMessage RecordBuilder
   */
  public static ChatMessage.Builder newBuilder() {
    return new ChatMessage.Builder();
  }

  /**
   * Creates a new ChatMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChatMessage RecordBuilder
   */
  public static ChatMessage.Builder newBuilder(ChatMessage.Builder other) {
    if (other == null) {
      return new ChatMessage.Builder();
    } else {
      return new ChatMessage.Builder(other);
    }
  }

  /**
   * Creates a new ChatMessage RecordBuilder by copying an existing ChatMessage instance.
   * @param other The existing instance to copy.
   * @return A new ChatMessage RecordBuilder
   */
  public static ChatMessage.Builder newBuilder(ChatMessage other) {
    if (other == null) {
      return new ChatMessage.Builder();
    } else {
      return new ChatMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for ChatMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChatMessage>
    implements org.apache.avro.data.RecordBuilder<ChatMessage> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence chat_id;
    private java.lang.CharSequence audio_message_id;
    private java.lang.CharSequence image_id;
    private java.lang.CharSequence timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ChatMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.chat_id)) {
        this.chat_id = data().deepCopy(fields()[1].schema(), other.chat_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.audio_message_id)) {
        this.audio_message_id = data().deepCopy(fields()[2].schema(), other.audio_message_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.image_id)) {
        this.image_id = data().deepCopy(fields()[3].schema(), other.image_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ChatMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(ChatMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.chat_id)) {
        this.chat_id = data().deepCopy(fields()[1].schema(), other.chat_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.audio_message_id)) {
        this.audio_message_id = data().deepCopy(fields()[2].schema(), other.audio_message_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.image_id)) {
        this.image_id = data().deepCopy(fields()[3].schema(), other.image_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public ChatMessage.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public ChatMessage.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'chat_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getChatId() {
      return chat_id;
    }


    /**
      * Sets the value of the 'chat_id' field.
      * @param value The value of 'chat_id'.
      * @return This builder.
      */
    public ChatMessage.Builder setChatId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.chat_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'chat_id' field has been set.
      * @return True if the 'chat_id' field has been set, false otherwise.
      */
    public boolean hasChatId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'chat_id' field.
      * @return This builder.
      */
    public ChatMessage.Builder clearChatId() {
      chat_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'audio_message_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getAudioMessageId() {
      return audio_message_id;
    }


    /**
      * Sets the value of the 'audio_message_id' field.
      * @param value The value of 'audio_message_id'.
      * @return This builder.
      */
    public ChatMessage.Builder setAudioMessageId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.audio_message_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'audio_message_id' field has been set.
      * @return True if the 'audio_message_id' field has been set, false otherwise.
      */
    public boolean hasAudioMessageId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'audio_message_id' field.
      * @return This builder.
      */
    public ChatMessage.Builder clearAudioMessageId() {
      audio_message_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'image_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getImageId() {
      return image_id;
    }


    /**
      * Sets the value of the 'image_id' field.
      * @param value The value of 'image_id'.
      * @return This builder.
      */
    public ChatMessage.Builder setImageId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.image_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'image_id' field has been set.
      * @return True if the 'image_id' field has been set, false otherwise.
      */
    public boolean hasImageId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'image_id' field.
      * @return This builder.
      */
    public ChatMessage.Builder clearImageId() {
      image_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public ChatMessage.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public ChatMessage.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ChatMessage build() {
      try {
        ChatMessage record = new ChatMessage();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.chat_id = fieldSetFlags()[1] ? this.chat_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.audio_message_id = fieldSetFlags()[2] ? this.audio_message_id : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.image_id = fieldSetFlags()[3] ? this.image_id : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ChatMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<ChatMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ChatMessage>
    READER$ = (org.apache.avro.io.DatumReader<ChatMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.chat_id);

    out.writeString(this.audio_message_id);

    out.writeString(this.image_id);

    out.writeString(this.timestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.chat_id = in.readString(this.chat_id instanceof Utf8 ? (Utf8)this.chat_id : null);

      this.audio_message_id = in.readString(this.audio_message_id instanceof Utf8 ? (Utf8)this.audio_message_id : null);

      this.image_id = in.readString(this.image_id instanceof Utf8 ? (Utf8)this.image_id : null);

      this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.chat_id = in.readString(this.chat_id instanceof Utf8 ? (Utf8)this.chat_id : null);
          break;

        case 2:
          this.audio_message_id = in.readString(this.audio_message_id instanceof Utf8 ? (Utf8)this.audio_message_id : null);
          break;

        case 3:
          this.image_id = in.readString(this.image_id instanceof Utf8 ? (Utf8)this.image_id : null);
          break;

        case 4:
          this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










